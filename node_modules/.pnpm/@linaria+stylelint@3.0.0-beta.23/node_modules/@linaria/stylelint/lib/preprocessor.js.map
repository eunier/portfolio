{"version":3,"file":"preprocessor.js","names":["preprocessor","errors","cache","offsets","code","input","filename","result","transform","undefined","e","rules","replacements","generatedLineNumber","cssText","Object","values","map","rule","ruleText","className","start","push","generated","line","column","original","name","displayName","split","length","join","reverse","error","sourceMap","warnings","warning","offset","find","o","prefix","message","stripAnsi","startsWith","replace","loc","l","includes","Number","trim","errored","text","severity","forEach","w","end"],"sources":["../src/preprocessor.ts"],"sourcesContent":["import stripAnsi from 'strip-ansi';\n\nimport { transform } from '@linaria/babel-preset';\nimport type { Replacement } from '@linaria/babel-preset';\n\ntype Errors = {\n  [key: string]:\n    | {\n        name?: string;\n        code?: string;\n        message: string;\n        pos?: number;\n        loc?: {\n          line: number;\n          column: number;\n        };\n      }\n    | null\n    | undefined;\n};\n\ntype Cache = {\n  [key: string]: Replacement[] | null | undefined;\n};\n\ntype Warning = {\n  rule?: string;\n  text: string;\n  severity: 'error' | 'warning';\n  line: number;\n  column: number;\n};\n\ntype LintResult = {\n  errored: boolean;\n  warnings: Warning[];\n};\n\ninterface IPosition {\n  line: number;\n  column: number;\n}\n\ninterface ISourceOffset {\n  generated: IPosition;\n  name: string;\n  original: IPosition;\n}\n\nfunction preprocessor() {\n  const errors: Errors = {};\n  const cache: Cache = {};\n  const offsets: Record<string, ISourceOffset[] | undefined> = {};\n\n  return {\n    code(input: string, filename: string) {\n      let result;\n\n      try {\n        result = transform(input, {\n          filename,\n        });\n\n        cache[filename] = undefined;\n        errors[filename] = undefined;\n        offsets[filename] = [];\n      } catch (e: unknown) {\n        cache[filename] = undefined;\n        offsets[filename] = undefined;\n        errors[filename] = e as Error;\n\n        // Ignore parse errors here\n        // We handle it separately\n        return '';\n      }\n\n      const { rules, replacements } = result;\n\n      if (!rules) {\n        return '';\n      }\n\n      // Construct a CSS-ish file from the unprocessed style rules\n      let generatedLineNumber = 1;\n      const cssText = Object.values(rules)\n        .map((rule) => {\n          const ruleText = `.${rule.className} {${rule.cssText}}`;\n\n          if (rule.start && 'line' in rule.start) {\n            offsets[filename]?.push({\n              generated: {\n                line: generatedLineNumber,\n                column: 1,\n              },\n              original: {\n                ...rule.start,\n              },\n              name: rule.displayName,\n            });\n\n            generatedLineNumber += 1;\n          }\n\n          generatedLineNumber += ruleText.split('\\n').length + 2;\n          return ruleText;\n        })\n        .join('\\n\\n');\n\n      cache[filename] = replacements;\n      offsets[filename] = offsets[filename]?.reverse();\n\n      return `${cssText}\\n`;\n    },\n    result(result: LintResult, filename: string) {\n      const error = errors[filename];\n      const replacements = cache[filename];\n      const sourceMap = offsets[filename];\n\n      if (sourceMap) {\n        // eslint-disable-next-line no-param-reassign\n        result.warnings = result.warnings.map((warning) => {\n          const offset = sourceMap.find(\n            (o) => o.generated.line <= warning.line\n          );\n          if (offset) {\n            // eslint-disable-next-line no-param-reassign\n            warning.line += offset.original.line - offset.generated.line;\n          }\n\n          return warning;\n        });\n      }\n\n      if (error) {\n        // Babel adds this to the error message\n        const prefix = `${filename}: `;\n\n        let message = stripAnsi(\n          error.message.startsWith(prefix)\n            ? error.message.replace(prefix, '')\n            : error.message\n        );\n\n        let { loc } = error;\n\n        if (!loc) {\n          // If the error doesn't have location info, try to find it from the code frame\n          const line = message.split('\\n').find((l) => l.startsWith('>'));\n          const column = message.split('\\n').find((l) => l.includes('^'));\n\n          if (line && column) {\n            loc = {\n              line: Number(line.replace(/^> /, '').split('|')[0].trim()),\n              column: column.replace(/[^|]+\\|\\s/, '').length,\n            };\n          }\n        }\n\n        if (loc) {\n          // Strip the codeframe text if we have location of the error\n          // It's formatted badly by stylelint, so not very helpful\n          message = message.replace(/^>?\\s+\\d?\\s\\|.*$/gm, '').trim();\n        }\n\n        // eslint-disable-next-line no-param-reassign\n        result.errored = true;\n        result.warnings.push({\n          rule: error.code || error.name,\n          text: message,\n          line: loc ? loc.line : 0,\n          column: loc ? loc.column : 0,\n          severity: 'error',\n        });\n      }\n\n      if (replacements) {\n        replacements.forEach(({ original, length }) => {\n          // If the warnings contain stuff that's been replaced,\n          // Correct the line and column numbers to what's replaced\n          result.warnings.forEach((w) => {\n            /* eslint-disable no-param-reassign */\n            if (w.line === original.start.line) {\n              // If the error is on the same line where an interpolation started, we need to adjust the line and column numbers\n              // Because a replacement would have increased or decreased the column numbers\n              // If it's in the same line where interpolation ended, it would have been adjusted during replacement\n              if (w.column > original.start.column + length) {\n                // The error is from an item after the replacements\n                // So we need to adjust the column\n                w.column +=\n                  original.end.column - original.start.column + 1 - length;\n              } else if (\n                w.column >= original.start.column &&\n                w.column < original.start.column + length\n              ) {\n                // The linter will underline the whole word in the editor if column is in inside a word\n                // Set the column to the end, so it will underline the word inside the interpolation\n                // e.g. in `${colors.primary}`, `primary` will be underlined\n                w.column =\n                  original.start.line === original.end.line\n                    ? original.end.column - 1\n                    : original.start.column;\n              }\n            }\n          });\n        });\n      }\n\n      return result;\n    },\n  };\n}\n\nexport default preprocessor;\n"],"mappings":"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"}