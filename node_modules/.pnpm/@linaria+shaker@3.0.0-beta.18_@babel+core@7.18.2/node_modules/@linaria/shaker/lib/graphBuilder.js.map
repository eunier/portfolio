{"version":3,"sources":["../src/graphBuilder.ts"],"names":["isVoid","node","t","isUnaryExpression","operator","GraphBuilder","GraphBuilderState","build","root","graph","constructor","rootNode","visit","isExportsIdentifier","isIdentifier","scope","getDeclaration","ScopeManager","globalExportsIdentifier","isMemberExpression","property","name","object","globalModuleIdentifier","isExportsAssignment","isAssignmentExpression","left","isTSExporterCall","isCallExpression","arguments","length","callee","baseVisit","ignoreDeps","dependencies","isExpression","keys","key","subNode","Array","isArray","i","child","push","forEach","dep","addEdge","callbacks","callback","parent","parentKey","listIdx","addParent","right","isStringLiteral","isObjectExpression","properties","prop","isObjectProperty","value","addExport","nameNode","identifier","isVariableDeclaration","declarations","declaration","isVariableDeclarator","init","currentAssignmentExpression","addedExport","edgesToAdd","edge","isScopable","isFunction","new","isProgram","fnStack","visitors","action","visitor","shift","method","bind","isStatement","pop","dispose"],"mappings":"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","sourcesContent":["import { types as t } from '@babel/core';\nimport type { AssignmentExpression, Node } from '@babel/types';\nimport { isNode, getVisitorKeys } from '@linaria/babel-preset';\nimport type { VisitorKeys } from '@linaria/babel-preset';\nimport DepsGraph from './DepsGraph';\nimport GraphBuilderState from './GraphBuilderState';\nimport { getVisitors } from './Visitors';\nimport type { VisitorAction } from './types';\nimport ScopeManager from './scope';\nimport { Visitor } from './types';\n\nconst isVoid = (node: Node): boolean =>\n  t.isUnaryExpression(node) && node.operator === 'void';\n\nclass GraphBuilder extends GraphBuilderState {\n  static build(root: Node): DepsGraph {\n    return new GraphBuilder(root).graph;\n  }\n\n  constructor(rootNode: Node) {\n    super();\n\n    this.visit(rootNode, null, null, null);\n  }\n\n  private isExportsIdentifier(node: Node) {\n    if (t.isIdentifier(node)) {\n      return (\n        this.scope.getDeclaration(node) === ScopeManager.globalExportsIdentifier\n      );\n    }\n\n    if (t.isMemberExpression(node)) {\n      return (\n        t.isIdentifier(node.property) &&\n        node.property.name === 'exports' &&\n        t.isIdentifier(node.object) &&\n        this.scope.getDeclaration(node.object) ===\n          ScopeManager.globalModuleIdentifier\n      );\n    }\n\n    return false;\n  }\n\n  private isExportsAssignment(node: Node): node is AssignmentExpression {\n    if (\n      node &&\n      t.isAssignmentExpression(node) &&\n      t.isMemberExpression(node.left)\n    ) {\n      if (this.isExportsIdentifier(node.left)) {\n        // This is a default export like `module.exports = 42`\n        return true;\n      }\n\n      if (this.isExportsIdentifier(node.left.object)) {\n        // This is a named export like `module.exports.a = 42` or `exports.a = 42`\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private isTSExporterCall(\n    node: Node\n  ): node is t.CallExpression & { arguments: [t.StringLiteral, t.Identifier] } {\n    if (!t.isCallExpression(node) || node.arguments.length !== 2) {\n      return false;\n    }\n\n    // FIXME: more precisely check\n    return !(!t.isIdentifier(node.callee) || node.callee.name !== 'exporter');\n  }\n\n  /*\n   * Implements a default behaviour for AST-nodes:\n   * • visits every child;\n   * • if the current node is an Expression node, adds all its children as dependencies.\n   *\n   * eg. BinaryExpression has children `left` and `right`,\n   * both of them are required for evaluating the value of the expression\n   */\n  baseVisit<TNode extends Node>(node: TNode, ignoreDeps = false) {\n    const dependencies = [];\n    const isExpression = t.isExpression(node);\n    const keys = getVisitorKeys(node);\n    for (const key of keys) {\n      // Ignore all types\n      if (key === 'typeArguments' || key === 'typeParameters') {\n        continue;\n      }\n\n      const subNode = node[key as keyof TNode];\n\n      if (Array.isArray(subNode)) {\n        for (let i = 0; i < subNode.length; i++) {\n          const child = subNode[i];\n          if (child && this.visit(child, node, key, i) !== 'ignore') {\n            dependencies.push(child);\n          }\n        }\n      } else if (\n        isNode(subNode) &&\n        this.visit(subNode, node, key) !== 'ignore'\n      ) {\n        dependencies.push(subNode);\n      }\n    }\n\n    if (isExpression && !ignoreDeps) {\n      dependencies.forEach((dep) => this.graph.addEdge(node, dep));\n    }\n\n    this.callbacks.forEach((callback) => callback(node));\n  }\n\n  visit<TNode extends Node, TParent extends Node>(\n    node: TNode,\n    parent: TParent | null,\n    parentKey: VisitorKeys<TParent> | null,\n    listIdx: number | null = null\n  ): VisitorAction {\n    if (parent) {\n      this.graph.addParent(node, parent);\n    }\n\n    if (\n      this.isExportsAssignment(node) &&\n      !this.isExportsAssignment(node.right) &&\n      !isVoid(node.right)\n    ) {\n      if (\n        t.isMemberExpression(node.left) &&\n        (t.isIdentifier(node.left.property) ||\n          t.isStringLiteral(node.left.property))\n      ) {\n        if (\n          t.isIdentifier(node.left.object) &&\n          node.left.object.name === 'module'\n        ) {\n          // It's a batch or default export\n          if (t.isObjectExpression(node.right)) {\n            // Batch export is a very particular case.\n            // Each property of the assigned object is independent named export.\n            // We also need to specify all dependencies and call `visit` for every value.\n            this.visit(\n              node.left,\n              node,\n              'left' as VisitorKeys<TNode & AssignmentExpression>\n            );\n            node.right.properties.forEach((prop) => {\n              if (t.isObjectProperty(prop) && t.isIdentifier(prop.key)) {\n                this.visit(prop.value, prop, 'value');\n                this.graph.addExport(prop.key.name, prop);\n                this.graph.addEdge(prop, node.right);\n                this.graph.addEdge(prop, prop.key);\n                this.graph.addEdge(prop.key, prop.value);\n              }\n            });\n\n            this.graph.addEdge(node.right, node);\n            this.graph.addEdge(node, node.left);\n          } else {\n            this.graph.addExport('default', node);\n            this.graph.addEdge(node, node.left);\n          }\n          // Regardless of whether the node.right is an object expression, this may also be the default export\n          this.graph.addExport('default', node);\n        } else {\n          // it can be either `exports.name` or `exports[\"name\"]`\n          const nameNode = node.left.property;\n          this.graph.addExport(\n            t.isStringLiteral(nameNode) ? nameNode.value : nameNode.name,\n            node\n          );\n        }\n      }\n    } else if (this.isTSExporterCall(node)) {\n      const [name, identifier] = node.arguments;\n      this.graph.addExport(name.value, node);\n      this.graph.addEdge(node, identifier);\n    } else if (t.isVariableDeclaration(node)) {\n      // We might be assigning to the exports, eg. `var Padding = exports.Padding = ...`\n      // or it might be a sequence and look like var foo = 1, var Name = exports.name = ...\n      node.declarations.forEach((declaration) => {\n        if (\n          t.isVariableDeclarator(declaration) &&\n          t.isAssignmentExpression(declaration.init)\n        ) {\n          let currentAssignmentExpression: t.Expression = declaration.init;\n          let addedExport = false;\n          let edgesToAdd = [];\n\n          // loop through the assignments looking for possible exports\n          while (t.isAssignmentExpression(currentAssignmentExpression)) {\n            edgesToAdd.push(currentAssignmentExpression);\n            if (\n              this.isExportsAssignment(currentAssignmentExpression) &&\n              t.isMemberExpression(currentAssignmentExpression.left) &&\n              (t.isIdentifier(currentAssignmentExpression.left.property) ||\n                t.isStringLiteral(currentAssignmentExpression.left.property))\n            ) {\n              const nameNode = currentAssignmentExpression.left.property;\n              this.graph.addExport(\n                t.isStringLiteral(nameNode) ? nameNode.value : nameNode.name,\n                node\n              );\n              addedExport = true;\n              edgesToAdd.push(declaration);\n              edgesToAdd.push(currentAssignmentExpression.left);\n              edgesToAdd.push(currentAssignmentExpression.right);\n            }\n\n            currentAssignmentExpression = currentAssignmentExpression.right;\n          }\n          if (addedExport) {\n            edgesToAdd.forEach((edge) => {\n              this.graph.addEdge(node, edge);\n            });\n          }\n        }\n      });\n    }\n\n    const isScopable = t.isScopable(node);\n    const isFunction = t.isFunction(node);\n\n    if (isScopable) this.scope.new(t.isProgram(node) || t.isFunction(node));\n    if (isFunction) this.fnStack.push(node);\n\n    const visitors = getVisitors(node);\n    let action: VisitorAction;\n    if (visitors.length > 0) {\n      let visitor: Visitor<TNode> | undefined;\n      while (!action && (visitor = visitors.shift())) {\n        const method: Visitor<TNode> = visitor.bind(this);\n        action = method(node, parent, parentKey, listIdx);\n      }\n    } else {\n      this.baseVisit(node);\n    }\n\n    if (parent && action !== 'ignore' && t.isStatement(node)) {\n      // Statement always depends on its parent\n      this.graph.addEdge(node, parent);\n    }\n\n    if (isFunction) this.fnStack.pop();\n    if (isScopable) this.scope.dispose();\n\n    return action;\n  }\n}\n\nexport default GraphBuilder.build;\n"],"file":"graphBuilder.js"}