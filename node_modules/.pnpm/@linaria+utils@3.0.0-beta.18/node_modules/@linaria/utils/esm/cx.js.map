{"version":3,"sources":["../src/cx.ts"],"names":["cx","presentClassNames","Array","prototype","slice","call","arguments","filter","Boolean","atomicClasses","nonAtomicClasses","className","individualClassNames","split","startsWith","keyHash","push","Object","values","join"],"mappings":"AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,EAAO,GAAG,SAASA,EAAT,GAAc;AAC5B,QAAMC,iBAAiB,GAAGC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CACvBC,IADuB,CAClBC,SADkB,EAEvBC,MAFuB,CAEhBC,OAFgB,CAA1B;AAIA,QAAMC,aAAsC,GAAG,EAA/C;AACA,QAAMC,gBAAgB,GAAG,EAAzB;;AACA,OAAK,MAAMC,SAAX,IAAwBV,iBAAxB,EAA2C;AACzC;AACA,UAAMW,oBAAoB,GAAGD,SAAS,CAACE,KAAV,CAAgB,GAAhB,CAA7B;;AAEA,SAAK,MAAMF,SAAX,IAAwBC,oBAAxB,EAA8C;AAC5C,UAAID,SAAS,CAACG,UAAV,CAAqB,MAArB,CAAJ,EAAkC;AAChC,cAAM,GAAGC,OAAH,IAAcJ,SAAS,CAACE,KAAV,CAAgB,GAAhB,CAApB;AACAJ,QAAAA,aAAa,CAACM,OAAD,CAAb,GAAyBJ,SAAzB;AACD,OAHD,MAGO;AACLD,QAAAA,gBAAgB,CAACM,IAAjB,CAAsBL,SAAtB;AACD;AACF;AACF;;AAED,SAAO,CAAC,GAAGM,MAAM,CAACC,MAAP,CAAcT,aAAd,CAAJ,EAAkC,GAAGC,gBAArC,EAAuDS,IAAvD,CACL,GADK,CAAP;AAGD,CAxBD;;AA0BA,eAAenB,EAAf","sourcesContent":["export type LinariaClassName = string & { __linariaClassName: true };\n\nexport type ClassName<T = string> = T | false | void | null | 0 | '';\n\ninterface ICX {\n  (...classNames: (ClassName | ClassName<LinariaClassName>)[]): string;\n}\n/**\n * Takes a list of class names and filters for truthy ones, joining them into a single class name for convenience.\n * eg.\n * ```js\n *  cx('red', isBig && 'big') // returns 'red big' if `isBig` is true, otherwise returns 'red'\n * ```\n * If space separated atomic styles are provided, they are deduplicated according to the first hashed valued:\n *\n * ```js\n *  cx('atm_a_class1 atm_b_class2', 'atm_a_class3') // returns `atm_a_class3 atm_b_class2`\n * ```\n *\n * @returns the combined, space separated class names that can be applied directly to the class attribute\n */\nconst cx: ICX = function cx() {\n  const presentClassNames = Array.prototype.slice\n    .call(arguments)\n    .filter(Boolean);\n\n  const atomicClasses: { [k: string]: string } = {};\n  const nonAtomicClasses = [];\n  for (const className of presentClassNames) {\n    // className could be the output of a previous cx call, so split by ' ' first\n    const individualClassNames = className.split(' ');\n\n    for (const className of individualClassNames) {\n      if (className.startsWith('atm_')) {\n        const [, keyHash] = className.split('_');\n        atomicClasses[keyHash] = className;\n      } else {\n        nonAtomicClasses.push(className);\n      }\n    }\n  }\n\n  return [...Object.values(atomicClasses), ...nonAtomicClasses].join(\n    ' '\n  ) as LinariaClassName;\n};\n\nexport default cx;\n"],"file":"cx.js"}