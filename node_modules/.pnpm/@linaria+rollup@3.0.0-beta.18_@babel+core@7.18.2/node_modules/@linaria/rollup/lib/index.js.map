{"version":3,"sources":["../src/index.ts"],"names":["linaria","include","exclude","sourceMap","preprocessor","rest","filter","cssLookup","config","name","configResolved","resolvedConfig","load","id","resolveId","importee","transform","code","result","filename","pluginOptions","cssText","slug","replace","cssSourceMapText","map","Buffer","from","toString","command","root","path","posix","relative","JSON","stringify"],"mappings":";;;;;;;AAMA;;AACA;;AACA;;;;AARA;AACA;AACA;AACA;AACA;AAmBe,SAASA,OAAT,CAAiB;AAC9BC,EAAAA,OAD8B;AAE9BC,EAAAA,OAF8B;AAG9BC,EAAAA,SAH8B;AAI9BC,EAAAA,YAJ8B;AAK9B,KAAGC;AAL2B,IAMP,EANV,EAMc;AAC3B,QAAMC,MAAM,GAAG,+BAAaL,OAAb,EAAsBC,OAAtB,CAAf;AACA,QAAMK,SAAoC,GAAG,EAA7C;AACA,MAAIC,MAAJ;AAEA,SAAO;AACLC,IAAAA,IAAI,EAAE,SADD;;AAELC,IAAAA,cAAc,CAACC,cAAD,EAA6B;AACzCH,MAAAA,MAAM,GAAGG,cAAT;AACD,KAJI;;AAKLC,IAAAA,IAAI,CAACC,EAAD,EAAa;AACf,aAAON,SAAS,CAACM,EAAD,CAAhB;AACD,KAPI;;AAQL;AACAC,IAAAA,SAAS,CAACC,QAAD,EAAmB;AAC1B,UAAIA,QAAQ,IAAIR,SAAhB,EAA2B,OAAOQ,QAAP;AAC5B,KAXI;;AAYLC,IAAAA,SAAS,CACPC,IADO,EAEPJ,EAFO,EAGiD;AAAA;;AACxD;AACA,UAAI,CAACP,MAAM,CAACO,EAAD,CAAP,IAAeA,EAAE,IAAIN,SAAzB,EAAoC;AAEpC,YAAMW,MAAM,GAAG,4BAAUD,IAAV,EAAgB;AAC7BE,QAAAA,QAAQ,EAAEN,EADmB;AAE7BT,QAAAA,YAF6B;AAG7BgB,QAAAA,aAAa,EAAEf;AAHc,OAAhB,CAAf;AAMA,UAAI,CAACa,MAAM,CAACG,OAAZ,EAAqB;AAErB,UAAI;AAAEA,QAAAA;AAAF,UAAcH,MAAlB;AAEA,YAAMI,IAAI,GAAG,0BAAQD,OAAR,CAAb;AACA,YAAMF,QAAQ,GAAI,GAAEN,EAAE,CAACU,OAAH,CAAW,YAAX,EAAyB,EAAzB,CAA6B,IAAGD,IAAK,MAAzD;;AAEA,UAAInB,SAAS,IAAIe,MAAM,CAACM,gBAAxB,EAA0C;AACxC,cAAMC,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYT,MAAM,CAACM,gBAAnB,EAAqCI,QAArC,CAA8C,QAA9C,CAAZ;AACAP,QAAAA,OAAO,IAAK,qDAAoDI,GAAI,IAApE;AACD;;AAEDlB,MAAAA,SAAS,CAACY,QAAD,CAAT,GAAsBE,OAAtB;;AACA,UAAI,YAAAb,MAAM,UAAN,0CAAQqB,OAAR,MAAoB,OAApB,gBAA+BrB,MAA/B,qCAA+B,SAAQsB,IAA3C,EAAiD;AAC/CvB,QAAAA,SAAS,CAAC,MAAMwB,cAAKC,KAAL,CAAWC,QAAX,CAAoBzB,MAAM,CAACsB,IAA3B,EAAiCX,QAAjC,CAAP,CAAT,GAA8DE,OAA9D;AACD;;AAEDH,MAAAA,MAAM,CAACD,IAAP,IAAgB,YAAWiB,IAAI,CAACC,SAAL,CAAehB,QAAf,CAAyB,KAApD;AAEA;;AACA,aAAO;AAAEF,QAAAA,IAAI,EAAEC,MAAM,CAACD,IAAf;AAAqBQ,QAAAA,GAAG,EAAEP,MAAM,CAACf;AAAjC,OAAP;AACD;;AA9CI,GAAP;AAgDD","sourcesContent":["/**\n * This file contains a Rollup loader for Linaria.\n * It uses the transform.ts function to generate class names from source code,\n * returns transformed code without template literals and attaches generated source maps\n */\n\nimport path from 'path';\nimport { createFilter } from '@rollup/pluginutils';\nimport { transform, slugify, Result } from '@linaria/babel-preset';\nimport type { PluginOptions, Preprocessor } from '@linaria/babel-preset';\n\ntype RollupPluginOptions = {\n  include?: string | string[];\n  exclude?: string | string[];\n  sourceMap?: boolean;\n  preprocessor?: Preprocessor;\n} & Partial<PluginOptions>;\n\ntype ViteConfig = {\n  root: string;\n  command: 'serve' | 'build';\n};\n\nexport default function linaria({\n  include,\n  exclude,\n  sourceMap,\n  preprocessor,\n  ...rest\n}: RollupPluginOptions = {}) {\n  const filter = createFilter(include, exclude);\n  const cssLookup: { [key: string]: string } = {};\n  let config: ViteConfig;\n\n  return {\n    name: 'linaria',\n    configResolved(resolvedConfig: ViteConfig) {\n      config = resolvedConfig;\n    },\n    load(id: string) {\n      return cssLookup[id];\n    },\n    /* eslint-disable-next-line consistent-return */\n    resolveId(importee: string) {\n      if (importee in cssLookup) return importee;\n    },\n    transform(\n      code: string,\n      id: string\n    ): { code: string; map: Result['sourceMap'] } | undefined {\n      // Do not transform ignored and generated files\n      if (!filter(id) || id in cssLookup) return;\n\n      const result = transform(code, {\n        filename: id,\n        preprocessor,\n        pluginOptions: rest,\n      });\n\n      if (!result.cssText) return;\n\n      let { cssText } = result;\n\n      const slug = slugify(cssText);\n      const filename = `${id.replace(/\\.[jt]sx?$/, '')}_${slug}.css`;\n\n      if (sourceMap && result.cssSourceMapText) {\n        const map = Buffer.from(result.cssSourceMapText).toString('base64');\n        cssText += `/*# sourceMappingURL=data:application/json;base64,${map}*/`;\n      }\n\n      cssLookup[filename] = cssText;\n      if (config?.command === 'serve' && config?.root) {\n        cssLookup['/' + path.posix.relative(config.root, filename)] = cssText;\n      }\n\n      result.code += `\\nimport ${JSON.stringify(filename)};\\n`;\n\n      /* eslint-disable-next-line consistent-return */\n      return { code: result.code, map: result.sourceMap };\n    },\n  };\n}\n"],"file":"index.js"}