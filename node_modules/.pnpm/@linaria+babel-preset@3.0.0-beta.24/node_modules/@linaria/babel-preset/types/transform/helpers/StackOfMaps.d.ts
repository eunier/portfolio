export declare class StackOfMaps<TKeys, TValues> implements Map<TKeys, TValues> {
    private readonly stack;
    get [Symbol.toStringTag](): string;
    get size(): number;
    [Symbol.iterator](): IterableIterator<[TKeys, TValues]>;
    clear(): void;
    delete(key: TKeys): boolean;
    entries(): IterableIterator<[TKeys, TValues]>;
    forEach(callbackFn: (value: TValues, key: TKeys, map: Map<TKeys, TValues>) => void, thisArg?: unknown): void;
    get(key: TKeys): TValues | undefined;
    has(key: TKeys): boolean;
    join(stack: StackOfMaps<TKeys, TValues>): void;
    keys(): IterableIterator<TKeys>;
    set(key: TKeys, value: TValues): this;
    setLazy(key: TKeys, value: () => TValues): this;
    values(): IterableIterator<TValues>;
}
