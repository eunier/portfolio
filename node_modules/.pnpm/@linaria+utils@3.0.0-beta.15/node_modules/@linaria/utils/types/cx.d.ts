export declare type LinariaClassName = string & {
    __linariaClassName: true;
};
export declare type ClassName<T = string> = T | false | void | null | 0 | '';
interface StyleCollectionObject {
    [key: string]: string;
}
interface ICX {
    (...classNames: ClassName<LinariaClassName>[]): LinariaClassName;
    (...classNames: (ClassName | ClassName<StyleCollectionObject>)[]): string;
}
/**
 * Takes a list of class names and filters for truthy ones, joining them into a single class name for convenience.
 * eg.
 * ```js
 *  cx('red', isBig && 'big') // returns 'red big' if `isBig` is true, otherwise returns 'red'
 * ```
 * If arguments provided are objects, these objects are merged together, and the values are taken as class names:
 *
 * ```js
 *  cx({ color: 'class1', textDecoration: 'class2'}, { color: 'class3' }) // returns `class3 class2`
 * ```
 *
 * @returns the combined, space separated class names that can be applied directly to the class attribute
 */
declare const cx: ICX;
export default cx;
