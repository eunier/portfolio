{"version":3,"sources":["../src/cx.ts"],"names":["cx","presentClassNames","Array","prototype","slice","call","arguments","filter","Boolean","classNamesResult","arg","styleCollectionResult","Object","values","assign","join"],"mappings":"AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,EAAO,GAAG,SAASA,EAAT,GAAc;AAC5B,QAAMC,iBAAiB,GAAGC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CACvBC,IADuB,CAClBC,SADkB,EAEvBC,MAFuB,CAEhBC,OAFgB,CAA1B,CAD4B,CAK5B;;AACA,QAAMC,gBAA0B,GAAGR,iBAAiB,CAACM,MAAlB,CAChCG,GAAD,IAAS,OAAOA,GAAP,KAAe,QADS,CAAnC,CAN4B,CAU5B;AACA;AACA;AACA;;AACA,QAAMC,qBAA+B,GAAGC,MAAM,CAACC,MAAP,CACtCD,MAAM,CAACE,MAAP,CACE,EADF,EAEE,GAAGb,iBAAiB,CAACM,MAAlB,CAA0BG,GAAD,IAAS,OAAOA,GAAP,KAAe,QAAjD,CAFL,CADsC,CAAxC;AAMA,SAAO,CAAC,GAAGC,qBAAJ,EAA2B,GAAGF,gBAA9B,EAAgDM,IAAhD,CACL,GADK,CAAP;AAGD,CAvBD;;AAyBA,eAAef,EAAf","sourcesContent":["export type LinariaClassName = string & { __linariaClassName: true };\n\nexport type ClassName<T = string> = T | false | void | null | 0 | '';\n\ninterface StyleCollectionObject {\n  [key: string]: string;\n}\n\ninterface ICX {\n  (...classNames: ClassName<LinariaClassName>[]): LinariaClassName;\n  (...classNames: (ClassName | ClassName<StyleCollectionObject>)[]): string;\n}\n/**\n * Takes a list of class names and filters for truthy ones, joining them into a single class name for convenience.\n * eg.\n * ```js\n *  cx('red', isBig && 'big') // returns 'red big' if `isBig` is true, otherwise returns 'red'\n * ```\n * If arguments provided are objects, these objects are merged together, and the values are taken as class names:\n *\n * ```js\n *  cx({ color: 'class1', textDecoration: 'class2'}, { color: 'class3' }) // returns `class3 class2`\n * ```\n *\n * @returns the combined, space separated class names that can be applied directly to the class attribute\n */\nconst cx: ICX = function cx() {\n  const presentClassNames = Array.prototype.slice\n    .call(arguments)\n    .filter(Boolean);\n\n  // In the basic case, `cx` is passed all strings, and we simply need to join them together with space separators\n  const classNamesResult: string[] = presentClassNames.filter(\n    (arg) => typeof arg !== 'object'\n  );\n\n  // There might also be objects (eg. from the atomic API) such as cx('foo', {\n  // key1: 'bar', key2: 'fizz'}, { key1: 'buzz' }) the desired behavior is to\n  // deduplicate the values based on their properties. The object's values are\n  // the class names\n  const styleCollectionResult: string[] = Object.values(\n    Object.assign(\n      {},\n      ...presentClassNames.filter((arg) => typeof arg === 'object')\n    )\n  );\n  return [...styleCollectionResult, ...classNamesResult].join(\n    ' '\n  ) as LinariaClassName;\n};\n\nexport default cx;\n"],"file":"cx.js"}