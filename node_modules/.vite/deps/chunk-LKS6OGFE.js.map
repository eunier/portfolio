{
  "version": 3,
  "sources": ["../../.pnpm/@linaria+core@3.0.0-beta.22/node_modules/@linaria/core/src/css.ts", "../../.pnpm/@linaria+core@3.0.0-beta.22/node_modules/@linaria/core/src/cx.ts"],
  "sourcesContent": ["import type { CSSProperties } from './CSSProperties';\nimport type { StyledMeta } from './StyledMeta';\nimport type { LinariaClassName } from './cx';\n\ntype CSS = (\n  strings: TemplateStringsArray,\n  ...exprs: Array<string | number | CSSProperties | StyledMeta>\n) => LinariaClassName;\n\nconst css: CSS = () => {\n  throw new Error(\n    'Using the \"css\" tag in runtime is not supported. Make sure you have set up the Babel plugin correctly.'\n  );\n};\n\nexport default css;\n", "export type LinariaClassName = string & { __linariaClassName: true };\n\nexport type ClassName<T = string> = T | false | void | null | 0 | '';\n\ninterface ICX {\n  (...classNames: ClassName<LinariaClassName>[]): LinariaClassName;\n  (...classNames: ClassName[]): string;\n}\n/**\n * Takes a list of class names and filters for truthy ones, joining them into a single class name for convenience.\n * eg.\n * ```js\n *  cx('red', isBig && 'big') // returns 'red big' if `isBig` is true, otherwise returns 'red'\n * ```\n * If space separated atomic styles are provided, they are deduplicated according to the first hashed valued:\n *\n * ```js\n *  cx('atm_a_class1 atm_b_class2', 'atm_a_class3') // returns `atm_a_class3 atm_b_class2`\n * ```\n *\n * @returns the combined, space separated class names that can be applied directly to the class attribute\n */\nconst cx: ICX = function cx() {\n  const presentClassNames: (ClassName | ClassName<LinariaClassName>)[] =\n    Array.prototype.slice\n      // eslint-disable-next-line prefer-rest-params\n      .call(arguments)\n      .filter(Boolean);\n\n  const atomicClasses: { [k: string]: string } = {};\n  const nonAtomicClasses: string[] = [];\n  presentClassNames.forEach((arg) => {\n    // className could be the output of a previous cx call, so split by ' ' first\n    const individualClassNames = arg ? arg.split(' ') : [];\n\n    individualClassNames.forEach((className) => {\n      if (className.startsWith('atm_')) {\n        const [, keyHash] = className.split('_');\n        atomicClasses[keyHash] = className;\n      } else {\n        nonAtomicClasses.push(className);\n      }\n    });\n  });\n\n  const result: string[] = [];\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const keyHash in atomicClasses) {\n    if (Object.prototype.hasOwnProperty.call(atomicClasses, keyHash)) {\n      result.push(atomicClasses[keyHash]);\n    }\n  }\n\n  result.push(...nonAtomicClasses);\n\n  return result.join(' ') as LinariaClassName;\n};\n\nexport default cx;\n"],
  "mappings": ";AASA,IAAMA,MAAW,MAAM;AACrB,QAAM,IAAIC,MACR,wGADI;AAGP;AAED,IAAA,cAAeD;;;ACOf,IAAME,KAAU,SAASA,MAAK;AAC5B,QAAMC,oBACJC,MAAMC,UAAUC,MAEbC,KAAKC,SAFR,EAGGC,OAAOC,OAHV;AAKF,QAAMC,gBAAyC,CAAA;AAC/C,QAAMC,mBAA6B,CAAA;AACnCT,oBAAkBU,QAASC,SAAQ;AAEjC,UAAMC,uBAAuBD,MAAMA,IAAIE,MAAM,GAAV,IAAiB,CAAA;AAEpDD,yBAAqBF,QAASI,eAAc;AAC1C,UAAIA,UAAUC,WAAW,MAArB,GAA8B;AAChC,cAAM,CAAA,EAAGC,OAAH,IAAcF,UAAUD,MAAM,GAAhB;AACpBL,sBAAcQ,OAAD,IAAYF;MAC1B,OAAM;AACLL,yBAAiBQ,KAAKH,SAAtB;MACD;IACF,CAPD;EAQD,CAZD;AAcA,QAAMI,SAAmB,CAAA;AAGzB,aAAWF,WAAWR,eAAe;AACnC,QAAIW,OAAOjB,UAAUkB,eAAehB,KAAKI,eAAeQ,OAApD,GAA8D;AAChEE,aAAOD,KAAKT,cAAcQ,OAAD,CAAzB;IACD;EACF;AAEDE,SAAOD,KAAK,GAAGR,gBAAf;AAEA,SAAOS,OAAOG,KAAK,GAAZ;AACR;AAED,IAAA,aAAetB;",
  "names": ["css", "Error", "cx", "presentClassNames", "Array", "prototype", "slice", "call", "arguments", "filter", "Boolean", "atomicClasses", "nonAtomicClasses", "forEach", "arg", "individualClassNames", "split", "className", "startsWith", "keyHash", "push", "result", "Object", "hasOwnProperty", "join"]
}
